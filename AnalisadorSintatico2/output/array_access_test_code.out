
C- COMPILATION: ../example/array_access_test_code.cm

Start parse():
1: void main(void) {
	1: reserved word: void
	1: ID, name= main
	1: (
	1: reserved word: void
	1: )
	1: {
2:     int a[10]; int b[10]; int c[10];
	2: reserved word: int
	2: ID, name= a
	2: [
	2: NUM, val= 10
	2: ]
	2: ;
	2: reserved word: int
	2: ID, name= b
	2: [
	2: NUM, val= 10
	2: ]
	2: ;
	2: reserved word: int
	2: ID, name= c
	2: [
	2: NUM, val= 10
	2: ]
	2: ;
3:     int i;
	3: reserved word: int
	3: ID, name= i
	3: ;
4:     i = 0;
	4: ID, name= i
	4: =
	4: NUM, val= 0
	4: ;
5:     while (i < 10) {
	5: reserved word: while
	5: (
	5: ID, name= i
	5: <
	5: NUM, val= 10
	5: )
	5: {
6:         b[i] = 1;
	6: ID, name= b
	6: [
	6: ID, name= i
	6: ]
	6: =
	6: NUM, val= 1
	6: ;
7:         c[i] = 1;
	7: ID, name= c
	7: [
	7: ID, name= i
	7: ]
	7: =
	7: NUM, val= 1
	7: ;
8:         i = i + 1;
	8: ID, name= i
	8: =
	8: ID, name= i
	8: +
	8: NUM, val= 1
	8: ;
9:     }
	9: }
10:     while (i < 10) {
	10: reserved word: while
	10: (
	10: ID, name= i
	10: <
	10: NUM, val= 10
	10: )
	10: {
11:         a[i] = b[i] + c[i];
	11: ID, name= a
	11: [
	11: ID, name= i
	11: ]
	11: =
	11: ID, name= b
	11: [
	11: ID, name= i
	11: ]
	11: +
	11: ID, name= c
	11: [
	11: ID, name= i
	11: ]
	11: ;
12:     }
	12: }
13: }	13: }
	13: EOF

Syntax tree:
  Type: void
    Id: main
      Type: int
        Id: a
          Const: 10
        Type: int
          Id: b
            Const: 10
          Type: int
            Id: c
              Const: 10
            Type: int
              Id: i
            Assign:
              Id: i
              Const: 0
            While
              Op: <
                Id: i
                Const: 10
              Assign:
                Id: b
                  Id: i
                Const: 1
              Assign:
                Id: c
                  Id: i
                Const: 1
              Assign:
                Id: i
                Op: +
                  Id: i
                  Const: 1
            While
              Op: <
                Id: i
                Const: 10
              Assign:
                Id: a
                  Id: i
                Op: +
                  Id: b
                    Id: i
                  Id: c
                    Id: i

Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers             
-------------  --------  -------  ---------  -------------------------
main                     fun      void        1 
input                    fun      int        
a              main      array    int         2 11 
b              main      array    int         2  6 11 
c              main      array    int         2  7 11 
i              main      var      int         3  4  5  6  7  8 10 11 
output                   fun      void       

Checking for main...

Checking types...

Semantic analysis finished
* C- Compilation to 3 Address Intermediate Code

      main:
          i = 0
        L1:
          t1 = i < 10
          if_false t1 goto L2
          t2 = i * 4
          b[t2] = 1
          t3 = i * 4
          c[t3] = 1
          t4 = i + 1
          i = t4
          goto L1
        L2:
        L3:
          t5 = i < 10
          if_false t5 goto L4
          t6 = i * 4
          t7 = i * 4
          t8 = i * 4
          t9 = b[t7] + c[t8]
          a[t6] = t9
          goto L3
        L4:
          halt
* End of execution.
