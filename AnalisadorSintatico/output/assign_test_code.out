
C- COMPILATION: ../example/assign_test_code.cm

Start parse():
1: void funOne (void) {
	1: reserved word: void
	1: ID, name= funOne
	1: (
	1: reserved word: void
	1: )
	1: {
2:     int a;
	2: reserved word: int
	2: ID, name= a
	2: ;
3:     int b;
	3: reserved word: int
	3: ID, name= b
	3: ;
4:     b = 1 + (5 * 7) / 2;
	4: ID, name= b
	4: =
	4: NUM, val= 1
	4: +
	4: (
	4: NUM, val= 5
	4: *
	4: NUM, val= 7
	4: )
	4: /
	4: NUM, val= 2
	4: ;
5:     a = b + 4;
	5: ID, name= a
	5: =
	5: ID, name= b
	5: +
	5: NUM, val= 4
	5: ;
6: }
	6: }
7: 
8: void main (void) {
	8: reserved word: void
	8: ID, name= main
	8: (
	8: reserved word: void
	8: )
	8: {
9:     int x;
	9: reserved word: int
	9: ID, name= x
	9: ;
10:     int y;
	10: reserved word: int
	10: ID, name= y
	10: ;
11:     y = x + 1;
	11: ID, name= y
	11: =
	11: ID, name= x
	11: +
	11: NUM, val= 1
	11: ;
12: }	12: }
	12: EOF

Syntax tree:
  Type: void
    Id: funOne
      Type: int
        Id: a
      Type: int
        Id: b
      Assign:
        Id: b
        Op: +
          Const: 1
          Op: /
            Op: *
              Const: 5
              Const: 7
            Const: 2
      Assign:
        Id: a
        Op: +
          Id: b
          Const: 4
  Type: void
    Id: main
      Type: int
        Id: x
      Type: int
        Id: y
      Assign:
        Id: y
        Op: +
          Id: x
          Const: 1

Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers             
-------------  --------  -------  ---------  -------------------------
main                     fun      void        8 
input                    fun      int        
funOne                   fun      void        1 
a              funOne    var      int         2  5 
b              funOne    var      int         3  4  5 
output                   fun      void       
x              main      var      int         9 11 
y              main      var      int        10 11 

Checking for main...

Checking types...

Semantic analysis finished
* C- Compilation to 3 Address Intermediate Code

    funOne:
          t1 = 5 * 7
          t2 = t1 / 2
          t3 = 1 + t2
          b = t3
          t4 = b + 4
          a = t4
      main:
          t5 = x + 1
          y = t5
          halt
* End of execution.
